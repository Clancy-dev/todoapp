// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  email             String   @unique
  name              String
  password          String
  profilePicture    String?
  securityQuestion  String
  securityAnswer    String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  todos       Todo[]
  expenses    Expense[]
  notes       Note[]
  plans       Plan[]

  @@map("users")
}

model Todo {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?
  category    String
  priority    String
  dueDate     DateTime?
  time        String?
  completed   Boolean  @default(false)
  userId      String   @db.ObjectId
  date        String   // Date string for daily todos
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("todos")
}

model Expense {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?
  amount      Float
  type        String   // "income" or "expense"
  category    String
  date        DateTime
  userId      String   @db.ObjectId
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("expenses")
}

model Note {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  content   String
  color     String
  category  String?
  tags      String[]
  userId    String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notes")
}

model Plan {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?
  category    String
  priority    String
  progress     Int        @default(0)
  status      String
  targetDate  DateTime?
  milestones  Milestone[]
  userId      String      @db.ObjectId
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("plans")
}

type Milestone {
  id        String  @default(uuid())
  text      String
  completed Boolean @default(false)
}
